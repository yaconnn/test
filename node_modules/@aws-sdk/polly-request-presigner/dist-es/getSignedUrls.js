import { __assign, __awaiter, __generator } from "tslib";
import { HttpRequest } from "@aws-sdk/protocol-http";
import { SignatureV4 } from "@aws-sdk/signature-v4";
import { formatUrl } from "@aws-sdk/util-format-url";
export var getSignedUrl = function (client, command, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(void 0, void 0, void 0, function () {
        var signer, presignInterceptMiddleware, presigned, output;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    signer = new SignatureV4(__assign({ service: options.service || "polly", uriEscapePath: options.uriEscapePath || false }, client.config));
                    presignInterceptMiddleware = function (next, context) { return function (args) { return __awaiter(void 0, void 0, void 0, function () {
                        var request, unsignableHeaders, presigned;
                        var _a, _b;
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    request = args.request;
                                    if (!HttpRequest.isInstance(request)) {
                                        throw new Error("Request to be presigned is not an valid HTTP request.");
                                    }
                                    request.method = "GET";
                                    delete request.headers["amz-sdk-invocation-id"];
                                    delete request.headers["amz-sdk-request"];
                                    delete request.headers["content-length"];
                                    request.body = "";
                                    request.query = __assign(__assign({}, request.query), args.input);
                                    unsignableHeaders = new Set();
                                    unsignableHeaders.add("content-type");
                                    return [4, signer.presign(request, __assign(__assign({ expiresIn: 3600, unsignableHeaders: unsignableHeaders }, options), { signingRegion: (_a = options.signingRegion) !== null && _a !== void 0 ? _a : context["signing_region"], signingService: (_b = options.signingService) !== null && _b !== void 0 ? _b : context["signing_service"] }))];
                                case 1:
                                    presigned = _c.sent();
                                    return [2, {
                                            response: {},
                                            output: {
                                                $metadata: { httpStatusCode: 200 },
                                                presigned: presigned,
                                            },
                                        }];
                            }
                        });
                    }); }; };
                    client.middlewareStack.addRelativeTo(presignInterceptMiddleware, {
                        name: "presignInterceptMiddleware",
                        relation: "before",
                        toMiddleware: "awsAuthMiddleware",
                    });
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, , 3, 4]);
                    return [4, client.send(command)];
                case 2:
                    output = _a.sent();
                    presigned = output.presigned;
                    return [3, 4];
                case 3:
                    client.middlewareStack.remove("presignInterceptMiddleware");
                    return [7];
                case 4: return [2, formatUrl(presigned)];
            }
        });
    });
};
