"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSignedUrl = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const signature_v4_1 = require("@aws-sdk/signature-v4");
const util_format_url_1 = require("@aws-sdk/util-format-url");
const getSignedUrl = async (client, command, options = {}) => {
    const signer = new signature_v4_1.SignatureV4({
        service: options.service || "polly",
        uriEscapePath: options.uriEscapePath || false,
        ...client.config,
    });
    const presignInterceptMiddleware = (next, context) => async (args) => {
        var _a, _b;
        const { request } = args;
        if (!protocol_http_1.HttpRequest.isInstance(request)) {
            throw new Error("Request to be presigned is not an valid HTTP request.");
        }
        request.method = "GET";
        delete request.headers["amz-sdk-invocation-id"];
        delete request.headers["amz-sdk-request"];
        delete request.headers["content-length"];
        request.body = "";
        request.query = {
            ...request.query,
            ...args.input,
        };
        const unsignableHeaders = new Set();
        unsignableHeaders.add("content-type");
        const presigned = await signer.presign(request, {
            expiresIn: 3600,
            unsignableHeaders,
            ...options,
            signingRegion: (_a = options.signingRegion) !== null && _a !== void 0 ? _a : context["signing_region"],
            signingService: (_b = options.signingService) !== null && _b !== void 0 ? _b : context["signing_service"],
        });
        return {
            response: {},
            output: {
                $metadata: { httpStatusCode: 200 },
                presigned,
            },
        };
    };
    client.middlewareStack.addRelativeTo(presignInterceptMiddleware, {
        name: "presignInterceptMiddleware",
        relation: "before",
        toMiddleware: "awsAuthMiddleware",
    });
    let presigned;
    try {
        const output = await client.send(command);
        presigned = output.presigned;
    }
    finally {
        client.middlewareStack.remove("presignInterceptMiddleware");
    }
    return (0, util_format_url_1.formatUrl)(presigned);
};
exports.getSignedUrl = getSignedUrl;
